[{"/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/App.js":"1","/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/reportWebVitals.js":"2","/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/index.js":"3","/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/Components/ContestInfomation/index.js":"4","/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/Components/Header/index.js":"5","/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/Components/Main/index.js":"6"},{"size":1989,"mtime":1611145271924,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1609184169036,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1609515095713,"results":"10","hashOfConfig":"8"},{"size":1273,"mtime":1611140713997,"results":"11","hashOfConfig":"8"},{"size":5732,"mtime":1611144174773,"results":"12","hashOfConfig":"8"},{"size":1184,"mtime":1611146460443,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12wcalp",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/App.js",[],"/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/reportWebVitals.js",[],"/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/index.js",[],"/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/Components/ContestInfomation/index.js",[],"/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/Components/Header/index.js",["27","28"],"import React, { useState } from 'react'\nimport './styles.css'\n\nconst Header = (props) => {\n    const [type, setType] = useState('')\n    const [keyword, setKeyword] = useState('')\n    const [sort, setSort] = useState('newer')\n\n    // 種類\n    const typeHandleChange = (filterType) => {\n        setType(filterType.target.value)\n        const searched = searchFilter(filterType.target.value, keyword)\n        const sorted = sortFilter(searched, sort)\n        props.setDisplayList(sorted)\n        sortFilter(sort)\n        console.log('type', filterType.target.value, props.contestsList, props.displayList)\n    }\n\n    // 検索\n    const keywordChange = (filterWord) => {\n        setKeyword(filterWord.target.value)\n        const searched = searchFilter(type, filterWord.target.value)\n        const sorted = sortFilter(searched, sort)\n        props.setDisplayList(sorted)\n        console.log('text', filterWord.target.value, props.contestsList, props.displayList)\n    }\n\n    // 空白のとこ\n    const searchFilter = (filterType, filterWord) => {\n        // 大文字小文字対応\n        const toLowerWord = filterWord.toLowerCase()\n        const regWord = new RegExp(`.*${toLowerWord}.*`)\n        const regType = new RegExp(`^(?=.*${filterType}).*$`)\n        return (props.contestsList.filter((contest) => {\n            const toLowerTitle = contest.title.toLowerCase()\n            // console.log(contest.title, 'text:', regWord.test(`${contest.start}${contest.duration_second}${contest.title}${contest.url}${contest.rate_change}`), 'id:', regType.test(`${contest.id}`))\n            return regWord.test(`${contest.start}${contest.duration_second}toLowerTitle${contest.url}${contest.rate_change}`) && regType.test(`${contest.id}`)\n        }))\n        console.log(props.contestsList, props.displayList)\n    }\n\n    // 表示件数\n    const displayCountHandleChange = (count) => {\n        props.setDisplayCount(+count.target.value)\n        console.log(props.displayCount, 'count')\n    }\n\n    // 並び替え   ok\n    const sortHandleChange = (filterSort) => {\n        setSort(filterSort.target.value)\n        const sorted = sortFilter(props.displayList, filterSort.target.value)\n        props.setDisplayList(sorted)\n        console.log(filterSort.target.value)\n    }\n\n    const sortFilter = (searchedList, filterSort) => {\n        if (filterSort === 'newer') {\n            return (searchedList.slice().sort((a, b) => {\n                if (a.start_epoch_second > b.start_epoch_second) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }))\n        }\n        if (filterSort === 'older') {\n            return (searchedList.slice().sort((a, b) => {\n                if (a.start_epoch_second < b.start_epoch_second) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }))\n        }\n        if (filterSort === 'abcSort') {\n            return (searchedList.slice().sort((a, b) => {\n                if (a.title < b.title) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }))\n        }\n    }\n\n    return (\n        <div class='header'>\n            <h1 class='header-logo'>Atcoder Contests Information</h1>\n\n            <div class=\"drawer\">\n                <input type=\"checkbox\" id=\"drawer-check\" class=\"drawer-hidden\" />\n                <label for=\"drawer-check\" class=\"drawer-open\"><span></span></label>\n                {/* forms */}\n                <div class='formats'>\n                    <div class='format select'>\n                        <select onChange={typeHandleChange} value={type}>\n                            <option value=''>ALL</option>\n                            <option value='abc'>ABC</option>\n                            <option value='arc'>ARC</option>\n                            <option value='agc'>AGC</option>\n                            <option value='past'>PAST</option>\n                            <option value='joi'>JOI</option>\n                            <option value='jag'>JAG</option>\n                        </select>\n                    </div>\n                    <div class='format select'>\n                        <select onChange={displayCountHandleChange} value={props.displayCount}>\n                            <option value='10'>10件表示</option>\n                            <option value='50'>50件表示</option>\n                            <option value='100'>100件表示</option>\n                            <option value={props.displayList.length} >全件表示</option>\n                        </select>\n                    </div>\n                    <div class='format select'>\n                        <select onChange={sortHandleChange} value={sort} class='sort-select'>\n                            <option value='newer'>新しい順</option>\n                            <option value='older'>古い順</option>\n                            <option value='abcSort'>五十音順</option>\n                        </select>\n                    </div>\n                    <div class='format'>\n                        <label class='format-focus'>\n                            <input\n                                class='text-format'\n                                type='text'\n                                value={keyword}\n                                placeholder='検索'\n                                onChange={(text) => { keywordChange(text) }}\n                            />\n                        </label>\n                        <span class='focus_line'></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","/Users/maekawaminoruyoshiko/program/AtCodersInformation/src/Components/Main/index.js",[],{"ruleId":"29","severity":1,"message":"30","line":35,"column":19,"nodeType":"31","messageId":"32","endLine":35,"endColumn":31},{"ruleId":"33","severity":1,"message":"34","line":39,"column":9,"nodeType":"35","messageId":"36","endLine":39,"endColumn":59},"no-unused-vars","'toLowerTitle' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode"]