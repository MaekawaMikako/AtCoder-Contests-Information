{"version":3,"sources":["Components/Header/index.js","Components/ContestInfomation/index.js","Components/Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","useState","type","setType","keyword","setKeyword","sort","setSort","searchFilter","filterType","filterWord","toLowerWord","toLowerCase","regWord","RegExp","regType","contestsList","filter","contest","title","test","start","duration_second","url","rate_change","id","sortFilter","searchedList","filterSort","slice","a","b","start_epoch_second","class","for","onChange","target","value","searched","sorted","setDisplayList","console","log","displayList","count","setDisplayCount","displayCount","length","placeholder","text","keywordChange","ContestInfomation","href","rel","Main","map","index","onClick","App","setContestsList","getInformation","axios","get","result","data","objectChange","list","moment","unix","format","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RA0IeA,G,YAvIA,SAACC,GAAW,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAEQF,mBAAS,IAFjB,mBAEfG,EAFe,KAENC,EAFM,OAGEJ,mBAAS,SAHX,mBAGfK,EAHe,KAGTC,EAHS,KAyBhBC,EAAe,SAACC,EAAYC,GAE9B,IAAMC,EAAcD,EAAWE,cACzBC,EAAU,IAAIC,OAAJ,YAAgBH,EAAhB,OACVI,EAAU,IAAID,OAAJ,gBAAoBL,EAApB,SAChB,OAAQT,EAAMgB,aAAaC,QAAO,SAACC,GACVA,EAAQC,MAAMP,cAEnC,OAAOC,EAAQO,KAAR,UAAgBF,EAAQG,OAAxB,OAAgCH,EAAQI,gBAAxC,uBAAsEJ,EAAQK,KAA9E,OAAoFL,EAAQM,eAAkBT,EAAQK,KAAR,UAAgBF,EAAQO,SAmB/IC,EAAa,SAACC,EAAcC,GAC9B,MAAmB,UAAfA,EACQD,EAAaE,QAAQvB,MAAK,SAACwB,EAAGC,GAClC,OAAID,EAAEE,mBAAqBD,EAAEC,oBACjB,EAED,KAIA,UAAfJ,EACQD,EAAaE,QAAQvB,MAAK,SAACwB,EAAGC,GAClC,OAAID,EAAEE,mBAAqBD,EAAEC,oBACjB,EAED,KAIA,YAAfJ,EACQD,EAAaE,QAAQvB,MAAK,SAACwB,EAAGC,GAClC,OAAID,EAAEX,MAAQY,EAAEZ,OACJ,EAED,UALnB,GAWJ,OACI,sBAAKc,MAAM,SAAX,UACI,oBAAIA,MAAM,cAAV,0CAEA,sBAAKA,MAAM,SAAX,UACI,uBAAO/B,KAAK,WAAWuB,GAAG,eAAeQ,MAAM,kBAC/C,uBAAOC,IAAI,eAAeD,MAAM,cAAhC,SAA8C,2BAE9C,sBAAKA,MAAM,UAAX,UACI,qBAAKA,MAAM,gBAAX,SACI,yBAAQE,SAtFH,SAAC1B,GACtBN,EAAQM,EAAW2B,OAAOC,OAC1B,IAAMC,EAAW9B,EAAaC,EAAW2B,OAAOC,MAAOjC,GACjDmC,EAASb,EAAWY,EAAUhC,GACpCN,EAAMwC,eAAeD,GACrBb,EAAWpB,GACXmC,QAAQC,IAAI,OAAQjC,EAAW2B,OAAOC,MAAOrC,EAAMgB,aAAchB,EAAM2C,cAgFnBN,MAAOnC,EAA3C,UACI,wBAAQmC,MAAM,GAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,sBAGR,qBAAKJ,MAAM,gBAAX,SACI,yBAAQE,SAhEK,SAACS,GAC9B5C,EAAM6C,iBAAiBD,EAAMR,OAAOC,OACpCI,QAAQC,IAAI1C,EAAM8C,aAAc,UA8D4BT,MAAOrC,EAAM8C,aAAzD,UACI,wBAAQT,MAAM,KAAd,kCACA,wBAAQA,MAAM,KAAd,kCACA,wBAAQA,MAAM,MAAd,mCACA,wBAAQA,MAAOrC,EAAM2C,YAAYI,OAAjC,2CAGR,qBAAKd,MAAM,gBAAX,SACI,yBAAQE,SAlEH,SAACP,GACtBrB,EAAQqB,EAAWQ,OAAOC,OAC1B,IAAME,EAASb,EAAW1B,EAAM2C,YAAaf,EAAWQ,OAAOC,OAC/DrC,EAAMwC,eAAeD,GACrBE,QAAQC,IAAId,EAAWQ,OAAOC,QA8DsBA,MAAO/B,EAAM2B,MAAM,cAAvD,UACI,wBAAQI,MAAM,QAAd,sCACA,wBAAQA,MAAM,QAAd,gCACA,wBAAQA,MAAM,UAAd,2CAGR,sBAAKJ,MAAM,SAAX,UACI,uBAAOA,MAAM,eAAb,SACI,uBACIA,MAAM,cACN/B,KAAK,OACLmC,MAAOjC,EACP4C,YAAY,eACZb,SAAU,SAACc,IA5GjB,SAACvC,GACnBL,EAAWK,EAAW0B,OAAOC,OAC7B,IAAMC,EAAW9B,EAAaN,EAAMQ,EAAW0B,OAAOC,OAChDE,EAASb,EAAWY,EAAUhC,GACpCN,EAAMwC,eAAeD,GACrBE,QAAQC,IAAI,OAAQhC,EAAW0B,OAAOC,MAAOrC,EAAMgB,aAAchB,EAAM2C,aAuGzBO,CAAcD,QAG5C,sBAAMhB,MAAM,6BCjGrBkB,G,MA9BW,SAACnD,GACvB,OACI,8BACI,sBAAKiC,MAAM,iBAAX,UACI,6BAAI,mBAAGmB,KAAMpD,EAAMkB,QAAQK,IAAKU,MAAM,gBAAgBG,OAAO,SAASiB,IAAI,sBAAtE,SAA6FrD,EAAMkB,QAAQC,UAC/G,gCACI,kCACI,+BACI,0DACA,6BAAKnB,EAAMkB,QAAQG,WAEvB,+BACI,4EACA,6BAAKrB,EAAMkB,QAAQI,qBAEvB,+BACI,kFACA,6BAAKtB,EAAMkB,QAAQM,iBAEvB,+BACI,kFACA,6BAAI,mBAAG4B,KAAMpD,EAAMkB,QAAQK,IAAKa,OAAO,SAASiB,IAAI,sBAAhD,SAAuErD,EAAMkB,QAAQK,uBCiBtG+B,G,MArCF,SAACtD,GAOV,OACI,sBAAKiC,MAAM,OAAX,UACI,qBAAKA,MAAM,QAAX,SACI,kEAGHjC,EAAM2C,YAAYY,KAAI,SAACrC,EAASsC,GAC7B,OAAIA,GAASxD,EAAM8C,aAAqB,KAEpC,cAAC,EAAD,CAAmB5B,QAASA,OAInClB,EAAM8C,aAAe9C,EAAM2C,YAAYI,QACpC,wBACId,MAAM,mBACNwB,QAAS,WApBrBzD,EAAM6C,gBAAgB7C,EAAM8C,aAAe,IAC3CL,QAAQC,IAAI1C,EAAM8C,aAAc,SAiBxB,qBAQH9C,EAAM8C,cAAgB9C,EAAM2C,YAAYI,QACrC,mBAAGd,MAAM,UAAT,0B,kCC0BDyB,EArDH,WAAO,IAAD,EACwBzD,mBAAS,IADjC,mBACTe,EADS,KACK2C,EADL,OAEsB1D,mBAAS,IAF/B,mBAET0C,EAFS,KAEIH,EAFJ,OAGwBvC,mBAAS,IAHjC,mBAGT6C,EAHS,KAGKD,EAHL,KAMVe,EAAc,uCAAG,4BAAA9B,EAAA,+EAEE+B,IAAMC,IACtB,wDAHc,QAEbC,EAFa,QAKZC,KAAK1D,MAAK,SAACwB,EAAGC,GACnB,OAAID,EAAEE,mBAAqBD,EAAEC,oBACnB,EAED,KAGXiC,EAAaF,EAAOC,MACpBL,EAAgBI,EAAOC,MACvBxB,EAAeuB,EAAOC,MACtBvB,QAAQC,IAAII,EAAc,SAfP,kDAkBnBL,QAAQC,IAAI,WAlBO,0DAAH,qDAuBduB,EAAe,SAACC,GACpB,OAAOA,EAAKX,KAAI,SAAArC,GAId,OAHAA,EAAQG,MAAQ8C,IAAOC,KAAKlD,EAAQc,oBAAoBqC,OAAO,oBAC/DnD,EAAQI,gBAAkBJ,EAAQI,gBAAkB,GAAK,SACzDJ,EAAQK,IAAR,sCAA6CL,EAAQO,IAC9CP,MAUX,OANAoD,qBAAU,WACRV,MAEC,IAID,sBAAK3B,MAAM,MAAX,UACE,cAAC,EAAD,CAAQjB,aAAcA,EAAc2C,gBAAiBA,EAAiBhB,YAAaA,EAAaH,eAAgBA,EAAgBM,aAAcA,EAAcD,gBAAiBA,IAC7K,cAAC,EAAD,CAAM7B,aAAcA,EAAc2C,gBAAiBA,EAAiBhB,YAAaA,EAAaH,eAAgBA,EAAgBM,aAAcA,EAAcD,gBAAiBA,QC1ClK0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6d830387.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './styles.css'\n\nconst Header = (props) => {\n    const [type, setType] = useState('')\n    const [keyword, setKeyword] = useState('')\n    const [sort, setSort] = useState('newer')\n\n    // 種類\n    const typeHandleChange = (filterType) => {\n        setType(filterType.target.value)\n        const searched = searchFilter(filterType.target.value, keyword)\n        const sorted = sortFilter(searched, sort)\n        props.setDisplayList(sorted)\n        sortFilter(sort)\n        console.log('type', filterType.target.value, props.contestsList, props.displayList)\n    }\n\n    // 検索\n    const keywordChange = (filterWord) => {\n        setKeyword(filterWord.target.value)\n        const searched = searchFilter(type, filterWord.target.value)\n        const sorted = sortFilter(searched, sort)\n        props.setDisplayList(sorted)\n        console.log('text', filterWord.target.value, props.contestsList, props.displayList)\n    }\n\n    // 空白のとこ\n    const searchFilter = (filterType, filterWord) => {\n        // 大文字小文字対応\n        const toLowerWord = filterWord.toLowerCase()\n        const regWord = new RegExp(`.*${toLowerWord}.*`)\n        const regType = new RegExp(`^(?=.*${filterType}).*$`)\n        return (props.contestsList.filter((contest) => {\n            const toLowerTitle = contest.title.toLowerCase()\n            // console.log(contest.title, 'text:', regWord.test(`${contest.start}${contest.duration_second}${contest.title}${contest.url}${contest.rate_change}`), 'id:', regType.test(`${contest.id}`))\n            return regWord.test(`${contest.start}${contest.duration_second}toLowerTitle${contest.url}${contest.rate_change}`) && regType.test(`${contest.id}`)\n        }))\n        console.log(props.contestsList, props.displayList)\n    }\n\n    // 表示件数\n    const displayCountHandleChange = (count) => {\n        props.setDisplayCount(+count.target.value)\n        console.log(props.displayCount, 'count')\n    }\n\n    // 並び替え   ok\n    const sortHandleChange = (filterSort) => {\n        setSort(filterSort.target.value)\n        const sorted = sortFilter(props.displayList, filterSort.target.value)\n        props.setDisplayList(sorted)\n        console.log(filterSort.target.value)\n    }\n\n    const sortFilter = (searchedList, filterSort) => {\n        if (filterSort === 'newer') {\n            return (searchedList.slice().sort((a, b) => {\n                if (a.start_epoch_second > b.start_epoch_second) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }))\n        }\n        if (filterSort === 'older') {\n            return (searchedList.slice().sort((a, b) => {\n                if (a.start_epoch_second < b.start_epoch_second) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }))\n        }\n        if (filterSort === 'abcSort') {\n            return (searchedList.slice().sort((a, b) => {\n                if (a.title < b.title) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }))\n        }\n    }\n\n    return (\n        <div class='header'>\n            <h1 class='header-logo'>Atcoder Contests Information</h1>\n\n            <div class=\"drawer\">\n                <input type=\"checkbox\" id=\"drawer-check\" class=\"drawer-hidden\" />\n                <label for=\"drawer-check\" class=\"drawer-open\"><span></span></label>\n                {/* forms */}\n                <div class='formats'>\n                    <div class='format select'>\n                        <select onChange={typeHandleChange} value={type}>\n                            <option value=''>ALL</option>\n                            <option value='abc'>ABC</option>\n                            <option value='arc'>ARC</option>\n                            <option value='agc'>AGC</option>\n                            <option value='past'>PAST</option>\n                            <option value='joi'>JOI</option>\n                            <option value='jag'>JAG</option>\n                        </select>\n                    </div>\n                    <div class='format select'>\n                        <select onChange={displayCountHandleChange} value={props.displayCount}>\n                            <option value='10'>10件表示</option>\n                            <option value='50'>50件表示</option>\n                            <option value='100'>100件表示</option>\n                            <option value={props.displayList.length} >全件表示</option>\n                        </select>\n                    </div>\n                    <div class='format select'>\n                        <select onChange={sortHandleChange} value={sort} class='sort-select'>\n                            <option value='newer'>新しい順</option>\n                            <option value='older'>古い順</option>\n                            <option value='abcSort'>五十音順</option>\n                        </select>\n                    </div>\n                    <div class='format'>\n                        <label class='format-focus'>\n                            <input\n                                class='text-format'\n                                type='text'\n                                value={keyword}\n                                placeholder='検索'\n                                onChange={(text) => { keywordChange(text) }}\n                            />\n                        </label>\n                        <span class='focus_line'></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport './styles.css'\n\nconst ContestInfomation = (props) => {\n    return (\n        <div>\n            <div class='contests-table'>\n                <h3><a href={props.contest.url} class='contest-title' target='_blank' rel='noopener noreferrer'>{props.contest.title}</a></h3>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>開始時刻</th>\n                            <td>{props.contest.start}</td>\n                        </tr>\n                        <tr>\n                            <th>コンテスト時間</th>\n                            <td>{props.contest.duration_second}</td>\n                        </tr>\n                        <tr>\n                            <th>レーティング変化</th>\n                            <td>{props.contest.rate_change}</td>\n                        </tr>\n                        <tr>\n                            <th>コンテストページ</th>\n                            <td><a href={props.contest.url} target='_blank' rel='noopener noreferrer'>{props.contest.url}</a></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default ContestInfomation","import React from 'react'\nimport ContestInfomation from '../ContestInfomation'\nimport './styles.css'\n\nconst Main = (props) => {\n    // もっと見る   ok\n    const onClickShowMore = () => {\n        props.setDisplayCount(props.displayCount + 10)\n        console.log(props.displayCount, 'more')\n    }\n\n    return (\n        <div class='main'>\n            <div class='title'>\n                <h2>Information about the contests</h2>\n            </div>\n\n            {props.displayList.map((contest, index) => {\n                if (index >= props.displayCount) return null\n                return (\n                    <ContestInfomation contest={contest} />\n                )\n            })}\n\n            {props.displayCount < props.displayList.length && (\n                <button\n                    class='show-more-button'\n                    onClick={() => { onClickShowMore() }}\n                >\n                    More...\n                </button>\n            )}\n\n            {props.displayCount >= props.displayList.length && (\n                <p class='no-more'>No more</p>\n            )}\n\n        </div>\n    )\n}\n\nexport default Main","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Header from './Components/Header/index.js'\nimport Main from './Components/Main/index.js'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst App = () => {\n  const [contestsList, setContestsList] = useState([])\n  const [displayList, setDisplayList] = useState([])\n  const [displayCount, setDisplayCount] = useState(10)\n\n  // 情報取得  ok\n  const getInformation = async () => {\n    try {\n      const result = await axios.get(\n        `${'https://kenkoooo.com/atcoder/resources/contests.json'}`\n      )\n      result.data.sort((a, b) => {\n        if (a.start_epoch_second > b.start_epoch_second) {\n          return -1;\n        } else {\n          return 1;\n        }\n      })\n      objectChange(result.data)\n      setContestsList(result.data)\n      setDisplayList(result.data)\n      console.log(displayCount, 'first')\n    } catch (error) {\n      // リクエストに失敗した時の処理\n      console.log('error!!')\n    }\n  }\n\n  // 日本時間、コンテスト時間　ok \n  const objectChange = (list) => {\n    return list.map(contest => {\n      contest.start = moment.unix(contest.start_epoch_second).format('YYYY-MM-DD HH:mm')\n      contest.duration_second = contest.duration_second / 60 + '分'// => 試験時間(分)\n      contest.url = `https://atcoder.jp/contests/${contest.id}`\n      return contest\n    })\n  }\n\n  useEffect(() => {\n    getInformation()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n\n  return (\n    <div class='App'>\n      <Header contestsList={contestsList} setContestsList={setContestsList} displayList={displayList} setDisplayList={setDisplayList} displayCount={displayCount} setDisplayCount={setDisplayCount} />\n      <Main contestsList={contestsList} setContestsList={setContestsList} displayList={displayList} setDisplayList={setDisplayList} displayCount={displayCount} setDisplayCount={setDisplayCount} />\n    </div>\n\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}